# -*- coding: utf-8 -*-
"""Aula1ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18zoVvZPxd6Uvn14OvyLbGdt1QIQqzYNl

**Intrudução**
Aula 1 do curso de fundamentos de ciência de dados com python na escola Senai

*Apresentação*

* Declarção de variáveis
* exemplo teste: a = 3, b = 3
"""
## git teste
a = 2
b = 3

a

b

a + b

b - a

a + a

1 / a

a / b

a * b

a ** b

c = 'senai'

c

import math as mt

mt.sqrt(49)

p = 100
i = 0.10
n = 2

FV = p * (1 + i) ** n
FV

FV - p


# Criamdo formula
def fv_calc(P, i, n):
    FV = P * (1 + (i / 100)) ** n
    return (FV)
    # print('O valor cálculado é', ' ', FV)


# Utilizando formula criada
# fv_calc(100, 10, 4)
print('O valor futuro calculado é', ' ', fv_calc(100, 10, 4))


# Desafio 1 minha resolução
# Calculadora de temperatura Fº / C°º / Kº
def tempcal(Fahrenheit, Celsius, Kelvin):
    # F para C
    T1 = ((Fahrenheit - 32) * (5 / 9))
    print('Conversao de F para C é', ' ', T1)
    # C para F
    T2 = ((Celsius * (9 / 5)) + 32)
    print('Conversao de C para F é', ' ', T2)
    # F para K
    T3 = (((Fahrenheit - 32) * (5 / 9)) + 273.15)
    print('Conversao de F para K é', ' ', T3)
    # K para F
    T4 = (((Kelvin - 273.15) * (9 / 5)) + 32)
    print('Conversao de K para F é', ' ', T4)
    # C para K
    T5 = (Celsius + 273.15)
    print('Conversao de C para K é', ' ', T5)
    # K PARA C
    T6 = (Kelvin - 273.15)
    print('Conversao de K para C é', ' ', T6)


# Minha resolução
tempcal(212, 70, 373.15)


# Desafio 1 resolução do professor
def celsiuskelvin(x):
    formulakelvin = x + 273.15
    return (formulakelvin)


celsiuskelvin(50)

from google.colab import drive

drive.mount('/content/drive')

celsius = float(input("Enter temperature in celsius: "))
fahrenheit = (celsius * 9 / 5) + 32
print('%.2f Celsius is: %0.2f Fahrenheit' % (celsius, fahrenheit))

lista1 = [1, 2, 3, 4, 5]
lista1

# Somatorio sum é soma da lista1 e len da o tamanho da lista1
sum(lista1) / len(lista1)


# Exercicio 1
def media(x):
    md = sum(x) / len(x)
    return (md)


media(x=[2, 4, 6])

# Tratando NA
import numpy  as np
import pandas as pd

x = [1, 3, 7, 15, 25, np.nan]

# pergunta se x tem nan, ao inserir ~ ele pergunta se x não é nan
~np.isnan(x)

x[0]
x[0] = True

# Tratando NA
x = pd.DataFrame(x)
x.dropna()

import numpy as np


# repassando
def media(x):
    x = np.array(x)
    x = x[~np.isnan(x)]
    md = sum(x) / len(x)
    return (md)


media(x=[np.nan, np.nan, 1, 4, 19, 23, np.nan, 34, np.nan, 50, 75, 90])

x2 = [1, 2, 4, 5, 7, 10, 12, 15]
media(x2)

x2 - media(x2)

# desvio padrão

import math as mt

mt.sqrt(sum(((x2 - media(x2)) ** 2) / len(x2)))


# Criar uma função para o desvio padrão
def desvio_padrao(x):
    desvio = mt.sqrt(sum(((x - media(x)) ** 2) / len(x)))
    return (desvio)


desvio_padrao([1, 2, 3, 100])

# Usando o append que inseri uma lista dentro de outra
x1 = [1, 2, 4]
x2 = [2]

x1.append(2)
x1

x1.sort()

x1

x1.reverse()

x1

x1.remove(4)

x1 = [1, 2, 5, 7, 10, 10, 10, 10]

x1.count(10)

x2 = x1.copy()

x2[0] = np.nan

x2 = [1, 2, 5, 7, 10, 10, 10, 10]
x2[0] = np.nan
x2

x2.remove(np.nan)

x2

# o 0 é o indice e o 4 é a quantidade de caracteres que irá trazer entre 0 e 4 que nesse caso ficou 4
x2[0:4]

x2.index(10)

casa = (2, 4, 6)

type(casa)

type(x2)
